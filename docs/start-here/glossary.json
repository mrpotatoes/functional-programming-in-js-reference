[
  {
    "term": "Sum Type",
    "definition": "",
    "aliases": [
      "tagged union",
      "variant",
      "variant record",
      "choice type",
      "discriminated union",
      "disjoint union",
      "coproduct"
    ],
    "references": []
  },
  {
    "term": "type refinement",
    "definition": "You can think of `type refinement` as a process where you always make sure you have only specific branches that handle your type information. Wether this is handled by your code, a static type checker or transpilation, type refinement makes your code type safe and overall safer to run.",
    "aliases": [],
    "references": []
  },
  {
    "term": "Disjunction",
    "definition": "A disjunction is a compound statement formed by joining two statements with the connector OR. The disjunction \"p or q\" is symbolized by `p ˅ q`. A disjunction is false if and only if both statements are false; otherwise it is true. The truth values of `p ˅ q` are listed in the truth table below.",
    "aliases": [],
    "references": [
      "https://tinyurl.com/y2fc7fdl",
      "https://tinyurl.com/y5xk3l6u"
    ]
  },
  {
    "term": "Tagged Union"
  },
  {
    "term": "Discriminated Union",
    "references": ["https://tinyurl.com/y4ze449w"]
  },
  {
    "term": "Pattern Matching"
  },
  {
    "term": "Union Type"
  },
  {
    "term": "Product Type"
  },
  {
    "term": "Record Type",
    "definition": "Something with a lable (JS Object)"
  },
  {
    "term": "Unit",
    "definition": "One. `void`, `null` et al are all `unit` types because there is only one possible value for it."
  }
]